# Copyright (c) 2017-present, Facebook, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import logging

from datasets import json_dataset
from utils import blob as blob_utils
from core.config import cfg

import roi_data.fast_rcnn

logger = logging.getLogger(__name__)


class GenerateProposalLabelsOp(object):

    def __init__(self, ohem=False):
        self._ohem = ohem
        self._tmp = dict(i=0,val=[])

    def forward(self, inputs, outputs):
        """See modeling.detector.GenerateProposalLabels for inputs/outputs
        documentation.
        """
        # During training we reuse the data loader code. We populate roidb
        # entries on the fly using the rois generated by RPN.
        # im_info: [[im_height, im_width, im_scale], ...]
        rois = inputs[0].data
        roidb = blob_utils.deserialize(inputs[1].data)
        im_info = inputs[2].data
        im_scales = im_info[:, 2]
        output_blob_names = roi_data.fast_rcnn.get_fast_rcnn_blob_names(ohem=self._ohem)
        # For historical consistency with the original Faster R-CNN
        # implementation we are *not* filtering crowd proposals.
        # This choice should be investigated in the future (it likely does
        # not matter).
        json_dataset.add_proposals(roidb, rois, im_scales, crowd_thresh=0, tmp=self._tmp)
        blobs = {k: [] for k in output_blob_names}
        roi_data.fast_rcnn.add_fast_rcnn_blobs(blobs, im_scales, roidb, self._ohem)
        for i, k in enumerate(output_blob_names):
            blob_utils.py_op_copy_blob(blobs[k], outputs[i])

class GenerateHardProposalLabelsOp(object):

    def forward(self, inputs, outputs):
        """See modeling.detector.GenerateHardProposalLabels for inputs/outputs
        documentation.
        """
        # get list of output names
        output_blob_names = roi_data.fast_rcnn.get_fast_rcnn_blob_names()

        #for i in range(len(inputs)):
        #    print('inputs  ', i, 'with shape', inputs[i].shape )

        #print('all output blobs:',output_blob_names)

        # associated original input with each output blob
        blobs = {k: inputs[i+1].data for i,k in enumerate(output_blob_names)}

        cls_scores = inputs[0].data

        output_blobs = roi_data.fast_rcnn.filter_fast_rcnn_blobs(blobs, output_blob_names, cls_scores)

        for i, k in enumerate(output_blob_names):
            blob_utils.py_op_copy_blob(output_blobs[k], outputs[i])
